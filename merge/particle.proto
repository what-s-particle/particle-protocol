syntax = "proto3";
package com.yunlong.particle.proto;

message Particle {
  string id = 1;
  oneof component {
    ElementComponent element = 2;
    LayoutComponent layout = 3;
  }
  optional Modifier modifier = 4;
  repeated Interaction interactions = 5;
}
message BorderModifier {
  int32 width = 1;
  ColorModifier color = 2;
}
message CustomModifier {
  string id = 1;
  optional string payload = 2;
}
// The styling of elements is a very important aspect. They grab the user's attention, make the application
// easier to use, and increase user satisfaction with the application. In mobile apps, common styles include colors,
// fonts, backgrounds, spacing, borders, and shadows, among others. These styles can be defined and applied by using
// CSS, XML or a dedicated style language.
// In mobile applications, a style is usually defined as a set of properties that control the appearance and behavior
// of an element. For example, a button's style might include background color, text color, font size and style,
// padding, border color and width, and more. These attributes can be shared among different elements in the
// application and can be modified when needed to suit different application needs.
// Another benefit of using styles is that it makes the application easier to maintain and modify. By defining
// styles as separate files, you can modify the look and feel of your application without affecting the
// application logic. This approach also improves development efficiency, since one style change can update
// multiple elements throughout the application.
message Modifier {
  repeated CustomModifier custom = 1;
  optional ColorModifier background = 2;
  optional OffsetModifier blur = 3;
  optional BorderModifier border = 4;
  optional bool clickable = 5;
  optional bool focusable = 6;
  optional OffsetModifier offset = 7;
  optional float opacity = 8;
  optional InsetsModifier padding = 9;
  optional SizeModifier require_size = 10;
  optional ShadowModifier shadow = 11;
  optional SizeModifier size = 12;
  optional bool visible = 13;
  optional float weight = 14;
}
message ColorModifier {
  oneof color {
    ColorToken token = 1;
    int32 value = 2;
  }
}
enum ColorToken {
  TOKEN_1 = 0;
  TOKEN_2 = 1;
}
message ColorValue {
  // The red component of the color, from 0-255.
  uint32 red = 1;
  // The green component of the color, from 0-255.
  uint32 green = 2;
  // The blue component of the color, from 0-255.
  uint32 blue = 3;
  // The alpha component of the color, from 0-255.
  float alpha = 4;
}
message SizeModifier {
  oneof sie {
    SizeToken token = 1;
    int32 value = 2;
  }
}
enum SizeToken {
  SIZE_TOKEN_0 = 0;
}
message InsetsModifier {
  optional SizeModifier left = 1;
  optional SizeModifier top = 2;
  optional SizeModifier right = 3;
  optional SizeModifier bottom = 4;
}
enum ShadowModifier {
  DEFAULT = 0;
  SHADOW_1 = 1;
  SHADOW_2 = 2;
}
message OffsetModifier {
  SizeModifier xOffset = 1;
  SizeModifier yOffset = 2;
}
message ElementComponent {
  oneof element {
    ButtonComponent button = 1; // Used to create a clickable button
    TextComponent label = 2; // Used to display text
    ImageComponent image = 3; // Used to display an image
    TextFieldComponent text_field = 4; // Used to create a text input field
    TextEditorComponent text_editor = 5; // Used to create a multiline text input field
    SliderComponent slider = 6; // Used to create a slider
    ToggleComponent toggle = 7; // Used to create a switch toggle
    CheckBoxComponent checkbox = 8; // Used to create a checkbox
    RadioButtonComponent radio_button = 9; // Used to create a radio button
    PickerComponent picker = 10; // Used to create a dropdown list
    TopAppBarComponent top_app_bar = 11; // Used to create a toolbar
    BottomBarItemComponent bottom_bar_item = 12; // Used to create a bottom bar
    AlertComponent alert = 13; // Used to create an alert dialog
    ActionSheetComponent action_sheet = 14; // Used to create an action sheet
  }
}
//  Layout container types.
//  HStack: a horizontal stack layout container that contains child elements
//  VStack: a vertical stack layout container that contains child elements
//  ZStack: a Z-axis stack layout container that contains child elements
//  LazyColumn: a lazy column layout container that contains child elements
//  LazyRow: a lazy row layout container that contains child elements
//  TabView: a tab view layout container that contains child tabs
//  NavigationView: a navigation view layout container that contains child elements
//  NOTE: Each of the layout container types includes a repeated field called `elements` or `tabs`,
//  which contains the child elements or tabs within the container.
message LayoutComponent {
  oneof component {
    ContainerComponent container = 1;
    RowComponent row = 2;
    ColumnComponent column = 3;
    BoxComponent box = 4;
    LazyColumnComponent lazy_column = 5;
    LazyRowComponent lazy_row = 6;
    TabViewComponent tab_view = 7;
    TopBarComponent top_bar = 8;
    BottomBarComponent bottom_bar = 9;
    NavGraphComponent nav_graph = 10;
    ModalDrawerComponent modal_drawer = 11;
    Screen screen = 12;
  }
}
// TopBarItem Element used to create an item for a toolbar.
message TopAppBarComponent {
  // Text to display for the item.
  optional Particle title = 1;
  // Navigation icon to display for the item.
  optional Particle navigation_icon = 2;
  // Action icon to display for the item.
  optional Particle action_icon = 3;
}
// Picker layout used to create a dropdown list
message PickerComponent {
  // The list of options available in the dropdown
  repeated Particle options = 1;
  // The currently selected item ID in the dropdown
  string selected_option = 2;
}
// Toggle Element used to create a toggle switch
message ToggleComponent {
  // The text label for the toggle switch.
  string label = 1;
  // Whether the toggle switch is currently in the "on" or "off" position.
  bool isChecked = 2;
}
// BottomBarItem Element used to create an item for a bottom bar.
message BottomBarItemComponent {
  // Text to display for the item.
  Particle text = 1;
  // Icon to display for the item.
  Particle icon = 2;
  // Whether this item is selected.
  bool selected = 3;
}
// RadioButton Element used to create a radio button
message RadioButtonComponent {
  // Whether the RadioButton is selected
  optional bool selected = 1;
  // Whether the RadioButton is enabled
  optional bool enabled = 2;
  // Color of the RadioButton when selected
  optional ColorModifier selectedColor = 3;
  // Color of the RadioButton when not selected
  optional ColorModifier unselectedColor = 4;
  // Color of the  RadioButton when disabled
  optional ColorModifier disabledColor = 5;
}
// Alert Element used to create an alert.
message AlertComponent {
  // Title of the alert.
  optional string title = 1;
  // Message to display in the alert.
  optional string message = 2;
  // Button to confirm the alert.
  optional Particle confirmButton = 3;
  // Button to dismiss the alert.
  optional Particle dismissButton = 4;
  optional Particle icon = 5;
}
// TextEditor Element used to create a multi-line text editor
message TextEditorComponent {
  // Optional placeholder text to display when the editor is empty
  optional string placeholder = 1;
  // The initial value of the text editor
  optional string value = 2;
}
// Button Element used to create a clickable button
message ButtonComponent {
  // Element(s) displayed on the button
  Particle elements = 1;
}
// Image Element used to display an image
message ImageComponent {
  // The URL of the image.
  string url = 1;
  // The localized description of the image.
  string description = 2;
  // Whether to display the image as a circular shape.
  bool circular = 4;
  // Whether to load the local resource
  bool local = 5;
  // The content mode of the image.
  ContentMode content_mode = 6;
}
enum ContentMode {
  SCALE_TO_FIT = 0;
  SCALE_ASPECT_FIT = 1;
  SCALE_ASPECT_FILL = 2;
}
// Image Element used to display an icon
message IconComponent {
  SymbolToken symbol = 1;
  optional string description = 2;
}
enum SymbolToken {
  XXX = 0;
}
// Text Element used to display text
message TextComponent {
  // The text content to be displayed
  string content = 1;
  // The name of the font family, such as "Arial".
  optional FontFamily fontFamily = 2;
  // The size of the font, in points.
  optional SizeModifier fontSize = 3;
  // Whether the text is bold or not.
  optional bool bold = 4;
  // Whether the text is italic or not.
  optional bool italic = 5;
  // Whether the text is underlined or not.
  optional bool underline = 6;
  // Whether the text has a strikethrough line or not.
  optional  bool strikethrough = 7;
  // The color of the text, specified as a hex code or name.
  optional  ColorModifier color = 8;
}
enum FontFamily {
  UNDEFINED = 0;
  SYSTEM_DEFAULT = 1;
  SANS_SERIF = 2;
  SERIF = 3;
  MONOSPACE = 4;
  CUSTOM_FONT = 5;
}
// TextField Element used to create a text field
message TextFieldComponent {
  // Optional placeholder text to display when the field is empty
  optional string placeholder = 1;
  // The initial value of the text field
  optional string value = 2;
}
// Slider Element used to create a slider
message SliderComponent {
  // Minimum value of the slider
  optional float min = 1;
  // Maximum value of the slider
  optional float max = 2;
  // Default value of the slider
  optional float defaultValue = 3;
  // Current value of the slider
  optional float currentValue = 4;
  // Optional label for the slider
  optional string label = 5;
}
// CheckBox Element used to create a checkbox
message CheckBoxComponent {
  // The label displayed next to the checkbox
  optional string label = 1;
  // The initial state of the checkbox
  optional bool isChecked = 2;
  // The color of the checkbox when it is not selected.
  optional ColorModifier uncheckedColor = 3;
  // The color of the checkbox when it is selected.
  optional ColorModifier checkedColor = 4;
}
// ActionSheet Element used to create an action sheet.
// In Jetpack Compose, we can use the combination of `DropdownMenu` and `Text` to implement an ActionSheet
// that pops up from the bottom.
message ActionSheetComponent {
  // Title of the action sheet.
  optional Particle title = 1;
  // Message to display in the action sheet.
  optional Particle message = 2;
  // Buttons to display in the action sheet.
  repeated Particle buttons = 3;
}
// Lazy row layout component.
message LazyRowComponent {
  // Child elements in the component.
  repeated Particle elements = 1;
  optional Arrangement arrangement = 2;
  optional Alignment alignment = 3;
  optional SizeModifier spacing = 4;
  optional bool reverse_layout = 5;
  optional InsetsModifier content_padding = 6;
}
message ModalDrawerComponent {
  Particle content = 1;
}
message Screen {
  string route = 1;
  Particle content = 2;
}
// BottomBar view layout component.
message BottomBarComponent {
  // Child elements in the component.
  repeated Particle elements = 1;
  // The currently selected item id in the NavigationView
  string selected_element = 2;
}
message NavGraphComponent {
  string name = 1;
  repeated Particle screens = 2;
  string startDestination = 3;
}
enum Arrangement {
  START = 0;
  END = 1;
  TOP = 2;
  BOTTOM = 3;
  CENTER = 4;
  SPACE_EVENLY = 5;
  SPACE_BETWEEN = 6;
  SPACE_AROUND = 7;
}
// Z-axis stack layout component.
message BoxComponent {
  // Child elements in the component.
  repeated Particle elements = 1;
}
// TopBar view layout component.
message TopBarComponent {
  Particle title = 1;
  Particle navigationIcon = 2;
  repeated Particle actions = 3;
  int32 elevation = 4;
  ColorModifier   backgroundColor = 5;
  ColorModifier  contentColor = 6;
}
// Lazy column layout component.
message LazyColumnComponent {
  repeated Particle elements = 1;
  optional Arrangement arrangement = 2;
  optional Alignment alignment = 3;
  optional SizeModifier spacing = 4;
  optional bool reverse_layout = 5;
  optional InsetsModifier content_padding = 6;
}
// Vertical stack layout component.
message ColumnComponent {
  // Child elements in the component.
  repeated  Particle elements = 1;
  optional Arrangement arrangement = 2;
  optional Alignment alignment = 3;
  optional SizeModifier spacing = 4;
}
enum Alignment {
  TOP_ALIGNMENT = 0;
  CENTER_ALIGNMENT = 1;
  BOTTOM_ALIGNMENT = 2;
  START_ALIGNMENT = 3;
  END_ALIGNMENT = 4;
  TOP_START = 5;
  TOP_CENTER = 6;
  TOP_END = 7;
  BOTTOM_START = 8;
  BOTTOM_CENTER = 9;
  BOTTOM_END = 10;
  CENTER_START = 11;
  CENTER_END = 12;
}
// Horizontal stack layout component.
message RowComponent {
  // Child elements in the component.
  repeated  Particle elements = 1;
  optional Arrangement arrangement = 2;
  optional Alignment alignment = 3;
  optional SizeModifier spacing = 4;
}
// `ContainerComponent` is inspired by Android's Scaffold. This component contains all the UI modules needed to build an application and belongs to the top layer of the UI.
message ContainerComponent {
  // Child elements in the component.
  Particle content = 1;
  Particle bottom_bar = 2;
  Particle top_bar_item = 3;
  Particle modal_drawer = 4;
}
// Tab view layout component.
message TabViewComponent {
  // Child tabs in the component.
  repeated Particle tabs = 1;
  // whether this tab is selected or not
  bool selected = 2;
  // controls the enabled state of this tab. When false, this component will not respond to user input,
  // and it will appear visually disabled and disabled to accessibility services.
  bool enabled = 3;
  // the color for the content of this tab when selected, and the color of the ripple.
  optional ColorModifier selected_color = 4;
  // the color for the content of this tab when not selected
  optional ColorModifier unselected_color = 5;
}
// An interaction refers to any user-triggered event that occurs in a software application, such as clicking a button,
// scrolling a page, or typing into a text field. Interactions can be used to initiate actions or events within
// an application.
message Interaction {
  repeated Event event = 1;
  repeated Action action = 2;
}
//  An action is a specific task or behavior that is triggered by a user interaction,
//  such as clicking a button or selecting an option from a menu. Actions can include a wide range of behaviors,
//  from displaying a message or changing the appearance of an interface element, to performing complex operations
//  such as sending data to a server or initiating a transaction.
message Action {
  oneof action {
    // Action to define by Particle user
    CustomAction custom = 1;
    // Action to open a new screen
    NavigateToAction navigate_to = 2;
    // Action to open previous screen
    NavigateBackAction navigate_back = 3;
    // Action to show a dialog
    ShowDialogAction show_dialog = 4;
    // Action to show a menu
    ShowMenuAction show_menu = 5;
    // Action to update the UI modifier
    UpdateModifierAction update_modifier = 6;
    // Action to store data
    StoreDataAction store_data = 7;
    // Action to send an HTTP request
    SendHttpRequestAction send_http_request = 8;
    // Action to open the browser, mailbox, phone, camera, etc.
    OpenExternalAppAction open_external_app = 9;
    ConditionAction condition = 10;
    RetrieveDataAction retrieve_data = 11;
  }
}
// An event is a notification that a specific action or interaction has occurred within a software application.
// Events can include user interactions such as clicking a button or scrolling a page, system notifications such as
// errors or warnings, or any other type of application-specific behavior.
//
// Events can be used to trigger other actions or behaviors within an application, or to provide feedback
// to the user about the state of the application.
enum Event {
  // User Events 0 ~19
  TOUCH_EVENT = 0;         // The event when the user touches the screen.
  TAP_EVENT = 1;           // The event when the user taps the screen.
  DOUBLE_TAP_EVENT = 2;    // The event when the user  double tap the screen.
  PINCH_EVENT = 3;         // The event when the user zooms in or out using two fingers on the screen.
  LONG_PRESS_EVENT = 4;    // The event when the user presses and holds the screen.
  SCROLL_EVENT = 5;        // The event when the user scrolls on the screen.
  ROTATE_EVENT = 6;        // The event when the user presses a key on the keyboard.
  BLUR_EVENT = 12;         // The event when an element loses focus.
  CHANGE_EVENT = 13;       // The event when the value of an element changes.
  FOCUS_EVENT = 14;        // The event when an element gains focus.
  INPUT_EVENT = 15;        // The event when the user inputs text.
  RESET_EVENT = 16;        // The event when a form element is reset.
  // Application and page lifecycle Events 20~29
  APP_START_EVENT = 20;
  APP_FOREGROUND_EVENT = 21;
  APP_BACKGROUND_EVENT = 22;
  APP_EXIT_EVENT = 23;
  PAGE_LOADED_EVENT = 24;
  // System Events 30~39
  PUSH_NOTIFICATION_RECEIVED = 30;
  PUSH_NOTIFICATION_OPENED = 31;
  NETWORK_CONNECTED_EVENT = 32;        // The event when the device connects to a network.
  NETWORK_DISCONNECTED_EVENT = 33;     // The event when the device disconnects from a network.
  // Device events  40~49
  BATTERY_LOW = 40;
  BATTERY_CHANGE = 41;
  SCREEN_ON = 42;
  SCREEN_OFF = 43;
  // Location Events
  LOCATION_UPDATE_EVENT = 50;          // The event when the device location changes.
  // Bluetooth Events
  // GPS Events
  //Layout and element Events 100~200
  ON_ACTION_SHEET_ITEM_CLICK = 100;
  ON_CHECKBOX_CHANGE = 101;
  ON_NAVIGATION_BAR_ITEM_CLICK = 102;
  ON_PICKER_ITEM_CLICK = 103;
  ON_RADIO_BUTTON_CLICK = 104;
  ON_SLIDER_VALUE_CHANGED = 105;
  ON_TEXT_FIELD_VALUE_CHANGED = 106;
  ON_TEXT_EDITOR_VALUE_CHANGED = 107;
  ON_TOGGLE_CHECKED_CHANGE = 108;
}
// Action to define by Particle user
message CustomAction {
  string id = 1;
  optional string payload = 2;
}
// Action to open a new screen
message NavigateToAction {
  // route of destination
  string route = 1;
  optional NavigationMode mode = 2;
}
// Action of if else
message ConditionAction {
  ConditionType type = 1;
  repeated Action if_actions = 2;
  repeated Action  else_actions = 3;
}
message ConditionType {
}
// Action to open previous screen
message NavigateBackAction {
  optional NavigationMode mode = 1;
}
enum NavigationMode{
  XXXX = 0;
}
// Action to update the UI modifier
message UpdateModifierAction {
  bool override = 1;
  Modifier modifier = 2;
}
// Action to retrieve data
message RetrieveDataAction {
  string key = 1;
  string value = 2;
  repeated Action subsequent_action = 3;
}
// Action to store data
message StoreDataAction {
  string key = 1;
  string value = 2;
}
// Action to open the browser, mailbox, phone, camera, etc.
message OpenExternalAppAction {
  string url = 1;
}
// Action to show a dialog
message ShowDialogAction {
  Particle dialog = 1;
}
// Action to send an HTTP request
message SendHttpRequestAction {
  string endpoint = 1;
  RequestType type = 2;
  map<string, string> body = 3;
  repeated Action success_actions = 4;
  repeated Action failure_actions = 5;
}
enum RequestType{
  GET = 0;
  POST = 1;
  PUT = 2;
  DELETE = 3;
  HEAD = 4;
  OPTIONS = 5;
  CONNECT = 6;
  TRACE = 7;
  PATCH = 8;
}
/// Action to show a menu
message ShowMenuAction {
  Particle menu = 1;
}