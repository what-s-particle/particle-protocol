syntax = "proto3";
package com.yunlong.particle.proto;

message Particle {
  string id = 1;
  oneof component {
    ElementComponent element = 2;
    LayoutComponent layout = 3;
  }
  Modifier modifier = 4;
  repeated Interaction interactions = 5;
}
message BorderModifier {
}
message CustomModifier {
}
// The styling of elements is a very important aspect. They grab the user's attention, make the application
// easier to use, and increase user satisfaction with the application. In mobile apps, common styles include colors,
// fonts, backgrounds, spacing, borders, and shadows, among others. These styles can be defined and applied by using
// CSS, XML or a dedicated style language.
// In mobile applications, a style is usually defined as a set of properties that control the appearance and behavior
// of an element. For example, a button's style might include background color, text color, font size and style,
// padding, border color and width, and more. These attributes can be shared among different elements in the
// application and can be modified when needed to suit different application needs.
// Another benefit of using styles is that it makes the application easier to maintain and modify. By defining
// styles as separate files, you can modify the look and feel of your application without affecting the
// application logic. This approach also improves development efficiency, since one style change can update
// multiple elements throughout the application.
message Modifier {
  repeated CustomModifier custom = 1;
  optional BackgroundModifier background = 2;
  optional OffsetModifier blur = 3;
  optional BorderModifier border = 4;
  optional bool clickable = 5;
  optional bool focusable = 6;
  optional OffsetModifier offset = 7;
  optional float opacity = 8;
  optional InsetsModifier padding = 9;
  optional SizeModifier require_size = 10;
  optional ShadowModifier shadow = 11;
  optional SizeModifier size = 12;
  optional bool visible = 13;
  optional float weight = 14;
}
message SizeModifier {
}
message InsetsModifier {
}
message BackgroundModifier {
}
message ShadowModifier {
}
message OffsetModifier {
}
message ElementComponent {
  oneof element {
    ButtonComponent button = 1; // Used to create a clickable button
    TextComponent label = 2; // Used to display text
    ImageComponent image = 3; // Used to display an image
    TextFieldComponent text_field = 4; // Used to create a text input field
    TextEditorComponent text_editor = 5; // Used to create a multiline text input field
    SliderComponent slider = 6; // Used to create a slider
    ToggleComponent toggle = 7; // Used to create a switch toggle
    CheckBoxComponent checkbox = 8; // Used to create a checkbox
    RadioButtonComponent radio_button = 9; // Used to create a radio button
    PickerComponent picker = 10; // Used to create a dropdown list
    ToolbarItemComponent tool_bar_item = 11; // Used to create a toolbar
    NavigationViewItemComponent navigation_view_item = 12; // Used to create a navigation bar
    AlertComponent alert = 13; // Used to create an alert dialog
    ActionSheetComponent action_sheet = 14; // Used to create an action sheet
  }
}
//  Layout container types.
//  HStack: a horizontal stack layout container that contains child elements
//  VStack: a vertical stack layout container that contains child elements
//  ZStack: a Z-axis stack layout container that contains child elements
//  LazyColumn: a lazy column layout container that contains child elements
//  LazyRow: a lazy row layout container that contains child elements
//  Scrollable: a scrollable layout container that contains child elements
//  TabView: a tab view layout container that contains child tabs
//  NavigationView: a navigation view layout container that contains child elements
//  NOTE: Each of the layout container types includes a repeated field called `elements` or `tabs`,
//  which contains the child elements or tabs within the container.
message LayoutComponent {
  oneof component {
    HStackComponent h_stack = 1;
    VStackComponent v_stack = 2;
    ZStackComponent z_stack = 3;
    LazyColumnComponent lazy_column = 4;
    LazyRowComponent lazy_row = 5;
    ScrollableComponent scrollable = 6;
    TabViewComponent tab_view = 7;
    NavigationViewComponent navigation_view = 8;
    ToolbarComponent tool_bar = 9;
  }
}
// NavigationViewItem Element used to create an item for a navigation view.
message NavigationViewItemComponent {
  // Text to display for the item.
  string text = 1;
  // Image to display for the item.
  Particle image = 2;
}
// Picker Element used to create a dropdown list
message PickerComponent {
  // The list of options available in the dropdown
  repeated string options = 1;
  // The initial value of the dropdown
  string value = 2;
  // The function to be executed when the value of the dropdown changes
  string onValueChange = 3;
}
// Toggle Element used to create a toggle switch
message ToggleComponent {
  // The label displayed next to the toggle switch
  string label = 1;
  // The initial state of the toggle switch
  bool value = 2;
  // The function to be executed when the state of the toggle switch changes
  string onValueChange = 3;
}
// RadioButton Element used to create a radio button
message RadioButtonComponent {
  // The label displayed next to the radio button
  string label = 1;
  // The initial state of the radio button
  bool value = 2;
  // The function to be executed when the state of the radio button changes
  string onValueChange = 3;
}
// Alert Element used to create an alert.
message AlertComponent {
  // Title of the alert.
  string title = 1;
  // Message to display in the alert.
  string message = 2;
  // Button to dismiss the alert.
  Particle dismissButton = 3;
}
// TextEditor Element used to create a multi-line text input field
message TextEditorComponent {
  // The text prompt to be displayed as a placeholder in the text editor
  string prompt = 1;
  // The initial value of the text editor
  string value = 2;
  // Function to be executed when the text in the editor changes
  string onValueChange = 3;
}
// Button Element used to create a clickable button
message ButtonComponent {
  // Text displayed on the button
  string label = 1;
}
// Image Element used to display an image
message ImageComponent {
  // The URL or resource identifier of the image to be displayed
  string source = 1;
  // The alternate text to be displayed in case the image is not available
  string alt = 2;
}
// ToolbarItem Element used to create an item for a toolbar.
message ToolbarItemComponent {
  // Text to display for the item.
  string text = 1;
  // Image to display for the item.
  Particle image = 2;
}
// Text Element used to display text
message TextComponent {
  // The text content to be displayed
  string content = 1;
}
// TextField Element used to create a text input field
message TextFieldComponent {
  // The text prompt to be displayed as a placeholder in the text field
  string prompt = 1;
  // The initial value of the text field
  string value = 2;
  // Function to be executed when the text in the field changes
  string onValueChange = 3;
}
// Slider Element used to create a slider
message SliderComponent {
  // The initial value of the slider
  double value = 1;
  // The minimum value of the slider
  double minValue = 2;
  // The maximum value of the slider
  double maxValue = 3;
  // The function to be executed when the value of the slider changes
  string onValueChange = 4;
}
// CheckBox Element used to create a checkbox
message CheckBoxComponent {
  // The label displayed next to the checkbox
  string label = 1;
  // The initial state of the checkbox
  bool value = 2;
  // The function to be executed when the state of the checkbox changes
  string onValueChange = 3;
}
// ActionSheet Element used to create an action sheet.
message ActionSheetComponent {
  // Title of the action sheet.
  string title = 1;
  // Message to display in the action sheet.
  string message = 2;
  // Buttons to display in the action sheet.
  repeated Particle buttons = 3;
}
// Lazy row layout component.
message LazyRowComponent {
  // Child elements in the component.
  repeated Particle elements = 1;
}
// Navigation view layout component.
message NavigationViewComponent {
  // Child elements in the component.
  repeated Particle elements = 1;
}
// Horizontal stack layout component.
message HStackComponent {
  // Child elements in the component.
  repeated  Particle elements = 1;
}
// Vertical stack layout component.
message VStackComponent {
  // Child elements in the component.
  repeated Particle elements = 1;
}
// Lazy column layout component.
message LazyColumnComponent {
  // Child elements in the component.
  repeated Particle elements = 1;
}
// Scrollable layout component.
message ScrollableComponent {
  // Child elements in the component.
  repeated Particle elements = 1;
}
// Toolbar element used to create a toolbar
message ToolbarComponent {
  // The list of toolbar items in the toolbar
  repeated  Particle elements = 1;
}
// Z-axis stack layout component.
message ZStackComponent {
  // Child elements in the component.
  repeated Particle elements = 1;
}
// Tab view layout component.
message TabViewComponent {
  // Child tabs in the component.
  repeated Particle tabs = 1;
}
// An interaction refers to any user-triggered event that occurs in a software application, such as clicking a button,
// scrolling a page, or typing into a text field. Interactions can be used to initiate actions or events within
// an application.
message Interaction {
  repeated Event event = 1;
  repeated Action action = 2;
}
//  An action is a specific task or behavior that is triggered by a user interaction,
//  such as clicking a button or selecting an option from a menu. Actions can include a wide range of behaviors,
//  from displaying a message or changing the appearance of an interface element, to performing complex operations
//  such as sending data to a server or initiating a transaction.
message Action {
  oneof action {
    // Action to define by Particle user
    CustomAction custom = 1;
    // Action to open a new screen
    NavigateToAction navigate_to = 2;
    // Action to open previous screen
    NavigateBackAction navigate_back = 3;
    // Action to submit a form
    SubmitFormAction submit_form = 4;
    // Action to show a dialog
    ShowDialogAction show_dialog = 5;
    // Action to show a menu
    ShowMenuAction show_menu = 6;
    // Action to update the UI modifier
    UpdateModifierAction update_modifier = 7;
    // Action to store data
    StoreDataAction store_data = 8;
    // Action to send an HTTP request
    SendHttpRequestAction send_http_request = 9;
    // Action to open the browser, mailbox, phone, camera, etc.
    OpenExternalAppAction open_external_app = 10;
  }
}
// An event is a notification that a specific action or interaction has occurred within a software application.
// Events can include user interactions such as clicking a button or scrolling a page, system notifications such as
// errors or warnings, or any other type of application-specific behavior.
//
// Events can be used to trigger other actions or behaviors within an application, or to provide feedback
// to the user about the state of the application.
enum Event {
  // User Events 0 ~19
  TOUCH_EVENT = 0;         // The event when the user touches the screen.
  TAP_EVENT = 1;           // The event when the user taps the screen.
  DOUBLE_TAP_EVENT = 2;    // The event when the user  double tap the screen.
  PINCH_EVENT = 3;         // The event when the user zooms in or out using two fingers on the screen.
  LONG_PRESS_EVENT = 4;    // The event when the user presses and holds the screen.
  SCROLL_EVENT = 5;        // The event when the user scrolls on the screen.
  ROTATE_EVENT = 6;        // The event when the user presses a key on the keyboard.
  BLUR_EVENT = 12;         // The event when an element loses focus.
  CHANGE_EVENT = 13;       // The event when the value of an element changes.
  FOCUS_EVENT = 14;        // The event when an element gains focus.
  INPUT_EVENT = 15;        // The event when the user inputs text.
  RESET_EVENT = 16;        // The event when a form element is reset.
  // Application and page lifecycle Events 20~29
  APP_START_EVENT = 20;
  APP_FOREGROUND_EVENT = 21;
  APP_BACKGROUND_EVENT = 22;
  APP_EXIT_EVENT = 23;
  PAGE_LOADED_EVENT = 24;
  // System Events 30~39
  PUSH_NOTIFICATION_RECEIVED = 30;
  PUSH_NOTIFICATION_OPENED = 31;
  NETWORK_CONNECTED_EVENT = 32;        // The event when the device connects to a network.
  NETWORK_DISCONNECTED_EVENT = 33;     // The event when the device disconnects from a network.
  // Device events  40~49
  BATTERY_LOW = 40;
  BATTERY_CHANGE = 41;
  SCREEN_ON = 42;
  SCREEN_OFF = 43;
  // Location Events
  LOCATION_UPDATE_EVENT = 50;          // The event when the device location changes.
  // Bluetooth Events
  // GPS Events
}
// Action to define by Particle user
message CustomAction {
  string content = 1;
}
// Action to open a new screen
message NavigateToAction {
  string content = 1;
}
// Action to open previous screen
message NavigateBackAction {
  string content = 1;
}
// Action to submit a form
message SubmitFormAction {
  string content = 1;
}
// Action to update the UI modifier
message UpdateModifierAction {
  string content = 1;
}
// Action to store data
message StoreDataAction {
  string content = 1;
}
// Action to open the browser, mailbox, phone, camera, etc.
message OpenExternalAppAction {
  string content = 1;
}
// Action to show a dialog
message ShowDialogAction {
  string content = 1;
}
// Action to send an HTTP request
message SendHttpRequestAction {
  string content = 1;
}
/// Action to show a menu
message ShowMenuAction {
  string content = 1;
}